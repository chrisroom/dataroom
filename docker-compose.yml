#version: '3.9'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:  ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pg-admin
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'      
    entrypoint: /bin/sh -c "chmod 600 /pgpass; /entrypoint.sh;"
    user: root
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /pgpass
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  minio:
    build:
      context: ./minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data

  dagster:
    build:
      context: ./dagster_project
    container_name: dagster
    ports:
      - "3000:3000"
    volumes:
      - ./dagster_project:/app
    environment:
      DAGSTER_HOME: /app/dagster_project
    depends_on:
      - postgres

  dbt:
    build:
      context: ./dbt
    container_name: dbt
    volumes:
      - ./dbt:/app
    environment:
      DBT_PROFILES_DIR: /app

  airbyte_new:
    #image: airbyte/airbyte-server:latest
    build:
        context: ./airbyte
    container_name: airbyte_new
    ports:
      - "8000:8000"  # Web UI
      - "8001:8001"  # Airbyte worker
    #environment:
    #  - AIRBYTE_ROLE=server
    volumes:
      - airbyte_data:/data
      - /var/run/docker.sock:/var/run/docker.sock  # Mount the Docker socket
    environment:
      - DOCKER_HOST=tcp://docker:2376
      #- DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - postgres
      - minio
    #  - docker
    privileged: true  # Docker-in-Docker erlauben
  #docker:
  #  image: docker:20.10.7-dind
  #  privileged: true
  #  environment:
  #    DOCKER_TLS_CERTDIR: /certs
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock

  # airbyte-server:
  #   image: airbyte/server:0.40.0-alpha
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - CONFIG_ROOT=/data/config
  #     - WORKSPACE_ROOT=/data/workspace
  #     - DATA_DOCKER_MOUNT=/data
  #   volumes:
  #     - airbyte_data:/data

  # airbyte-scheduler:
  #   image: airbyte/scheduler:0.40.0-alpha
  #   depends_on:
  #     - airbyte-server
  #   environment:
  #     - CONFIG_ROOT=/data/config
  #     - WORKSPACE_ROOT=/data/workspace
  #     - DATA_DOCKER_MOUNT=/data
  #   volumes:
  #     - airbyte_data:/data

  # airbyte-webapp:
  #   image: airbyte/webapp:0.40.0-alpha
  #   depends_on:
  #     - airbyte-server
  #   ports:
  #     - "80:80"

  # openmetadata-server:
  #   #image: openmetadata/server:latest
  #   container_name: openmetadata_server
  #   restart: always
  #   image: docker.getcollate.io/openmetadata/server:1.2.0
  #   build:
  #     context: ./openmetadata
  #   ports:
  #     - "8585:8585"
  #   environment:
  #     - DATABASE_URL=jdbc:postgresql://postgres:5432/openmetadata
  #     - DATABASE_USERNAME=postgres
  #     - DATABASE_PASSWORD=postgres
  #     #- OPENMETADATA_SERVER_HOST=localhost
  #     #- OPENMETADATA_SERVER_PORT=8585
  #     #- OPENMETADATA_DATABASE_HOST=postgres
  #     #- OPENMETADATA_DATABASE_PORT=5432
  #     #- OPENMETADATA_DATABASE_USER=postgres
  #     #- OPENMETADATA_DATABASE_PASSWORD=postgres
  #     #- OPENMETADATA_DATABASE_NAME=metadata
  #     #- OPENMETADATA_SEARCH_HOST=elasticsearch
  #     #- OPENMETADATA_SEARCH_PORT=9200
  #   depends_on:
  #     - postgres
  #     - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  doris_frontend:
    image: apache/doris:2.0.0_alpha-fe-x86_64
    hostname: doris_frontend
    environment:
      - FE_SERVERS=doris_frontend:127.0.0.1:9010
      - FE_ID=1
      - MASTER_FE_IP=192.168.143.81
    volumes:
      - /data/doris_frontend/doris-meta/:/opt/apache-doris/fe/doris-meta/
      - /data/doris_frontend/log/:/opt/apache-doris/fe/log/
      - ./fe.conf:/opt/apache-doris/fe/fe.conf
    network_mode: host

  doris_backend:
    image: apache/doris:2.0.0_alpha-be-x86_64
    hostname: doris_backend
    environment:
      - FE_SERVERS=doris_frontend:127.0.0.1:9010
      - BE_ADDR=doris_backend:9050

    volumes:
      - /data/doris_backend/storage/:/opt/apache-doris/be/storage/
      - /data/doris_backend/script/:/docker-entrypoint-initdb.d/
    depends_on:
      - doris_frontend
    network_mode: host

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    hostname: metabase
    volumes:
      - /dev/urandom:/dev/random:ro
    ports:
      - 4000:4000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_HOST: postgres

  superset:
     build:
       context: ./superset
     container_name: superset
  #   networks:
  #     internal:
  #     external:
     ports:
       - "8088:8088"
     environment:
       SUPERSET_ADMIN_USER: ${SUPERSET_ADMIN_USER}
       SUPERSET_ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
     volumes:
       - superset_home:/app/superset_home
  #   entrypoint: "/app/docker-init.sh"

  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:latest
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    privileged: true
    depends_on:
      - mosquitto
      - zigbee2mqtt

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    volumes:
      - ./mosquitto:/mosquitto/config
      - ./data/mosquitto/data:/mosquitto/data
      - ./data/mosquitto/log:/mosquitto/log
    ports:
      - 1883:1883
      - 9002:9002 #9001
    restart: unless-stopped

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    volumes:
      - ./zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    #devices:
    #  - /dev/ttyUSB0:/dev/ttyUSB0
    environment:
      - TZ=Europe/Berlin
    restart: unless-stopped
    depends_on:
      - mosquitto

volumes:
  postgres_data:
  pgadmin_data:
  minio_data:
  airbyte_data:
  superset_home:
  elasticsearch_data:


configs:
  pgpass:
    content: postgres:5432:*:postgres:postgres
  servers.json:
    content: |
      {"Servers": {"1": {
        "Group": "Servers",
        "Name": "postgres",
        "Host": "postgres",
        "Port": 5432,
        "MaintenanceDB": "postgres",
        "Username": "postgres",
        "PassFile": "/pgpass",
        "SSLMode": "prefer"
      }}}

#networks:
#  internal:
#    driver: bridge
#  external:
#    external: true

#x-include:
 # - file: openmetadata/docker-compose.yml